services:
  postgres:
    image: postgres:16
    container_name: de_postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20

  adminer:
    image: adminer:4
    container_name: de_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: quay.io/minio/minio:latest
    container_name: de_minio
    restart: unless-stopped
    env_file: .env
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    ports:
      - "${MINIO_PORT}:9000"         # S3 API
      - "${MINIO_CONSOLE_PORT}:9001" # Web console
    volumes:
      - minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 20

  mc-init:
    image: quay.io/minio/mc:latest
    container_name: de_minio_init
    depends_on:
      minio:
        condition: service_healthy
    env_file: .env
    entrypoint: ["/bin/sh","-lc"]
    # NOTE: $${b} is double-$ so Docker Compose doesn't try to substitute it.
    command: |
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && \
      for b in $(echo ${MINIO_BUCKETS} | tr ',' ' '); do \
        mc mb -p local/$${b} || true; \
        mc version enable local/$${b} || true; \
      done && \
      echo 'MinIO buckets initialized'
    restart: "no"

volumes:
  pgdata:
  minio:
